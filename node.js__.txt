HTML 개발 + JavaScript
-JavaScript 매우 기초적인 방식으로 사용 ex)웹페이지에 상호작용 기능 추가

JavaScript
1. DHTML 헬퍼
2. jQuery와 같은 프론트앤드 도구
3. 서버사이드
-'완결성을 가진'언어
- 이 언어를 수많은 환경속에서 사용할 수 있고
 '완결성을 가진' 다른 언어들과 마찬가지로 무엇이든지 만들어 낼 수 있다.

Node.js
- 서버 위에서 동작하는 JavasScript
- 실제로 단지 다른 환경일 뿐 브라우저 밖, 백앤드에서 Javascript 실행 가능
- 구글 크롬 브라우저가 사용하는 JavaScript 실행환경과 동일한 
  구글의 V8 가상머신을 사용해 백앤드에서 지정한 JavaScript 잘 해석하고 실행
- 많은 유용한 모듈 탑재


Node.js로 활짝 핀 웹 애플리케이션
유스케이스
- 사용자는 웹 브라우저로 우리의 웹 애플리케이션 이용할 수 있다.
- 사용자가 http://domain/start를 요청하면 
 파일 업로드 폼이 들어있는 웰컴페이지를 볼 수 있어야 한다.
- 업로드할 이미지 파일을 선택해서 폼으로 전송하면, 
 해당 이미지는 http://domain/upload로 업로드 되어야 하며, 
 업로드가 끝나면 해당 페이지에 표시된다.

유스케이스를 만족시키기 위해 구현되어야 하는 부분?
1. HTTP 서버 
	- 웹 페이지 제공
2. 라우터(router) 
	- 요청과 요청을 처리할 핸들러 연결
         서버는 어떤 URL 요청인지에 따라 다르게 응답해야 함
3. 요청 핸들러(request handlers) 
	- 서버로 도착한 요청, 라우팅된 요청 만족
4. 요청 데이터 핸들링(request data handling) 
	- 해당 데이터를 다루기 편한 형태로 만들어 요청 핸들러에게 넘겨줌                                          
5. 뷰 로직(view logic) 
	- URL이 요청되었을 때 내용 표시
6. 업로드 핸들링(upload handling)
	- 사용자가 이미지 업로드 할 수 있어야 함

위의 스택을 구축하는 방법
1. PHP이용 : 아파치 HTTP 서버 설치 
	-> '웹페이지 제공하고 HTTP요청 받을수 있어야 한다'는 요구 만족 X
2. Node.js 이용 : 애플리케이션 뿐만 아니라 HTTP 서버 통째로 구현
		(웹 애플리케이션과 웹 서버 기본적으로 동일)

(웹 애플리케이션:프로그래밍 언어를 사용해서 웹상에서 특정 기능을 수행하는 것)
웹사이트는 단순히 정보의 표현 및 전달을 목적으로 하지만 
웹 애플리케이션은 웹을 이용한 각종 업무를 처리하는데 의의가 있다.