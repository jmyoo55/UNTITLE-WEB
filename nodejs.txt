php의 단점(한계점)
- 오직 ‘웹 개발’을 위해서만 쓸 수 있다.
- 방대한 웹사이트를 제작할 경우, 개발자의 입장에서 체계적이지 않기 때문에 구조 잡기가 매우 힘들다.
- 유저 형태가 다양하다거나 복잡한 기능을 많이 갖춰야 하는 사이트를 구축하고자 할 때에는 PHP가 적합하지 않다.
- 다른 프로그래머들이 쉽게 접근 할 수 있기 때문에 보안문제가 발생할 수 있다.


node.js 의 장점
- 높은 생산성 : 한가지의 언어(javascript)로 서버와 클라이언트를 개발할 수 있어서 높은 생산성을 보여준다.

- 고성능이다 : google의 v8엔진에서 실행되기 때문에 자바 스크립트를 직접 기계어로 컴파일하여 대부분의 것보다 빠르게 만든다. 
		I/O 작업을 논 블로킹 방식으로 처리하여 I/O 작업이 많은 서버로 적합하다.
		싱글 스레드 방식을 사용하여 멀티 스레드 방식에 비해 컴퓨터 자원을 적게 사용한다.

- 실시간 웹 애플리케이션에 적합 :　node.js의 모듈 중 하나인 socket.io를 이용하여 웹 push 구현이 매우 쉽다. 
	node.js의 이벤트 중심 아키텍처는 실시간 애플리케이션, 특히 채팅 애플리케이션 및 게임에 적합, 
	클라이언트 측과 서버 측 모두 javascript로 작성되므로 동기화 프로세스가 더 빠르다.

- 계속 증가하는 NPM : 오픈 소스 기술이기 때문에 node.js는 좋은 도구와 모듈을 공유하는 저장소를 가지고 있다.

- JSON과의 호환성이 좋다.
	

※논 블로킹 
논 블로킹 방식은 이전 작업이 완료될 때 까지 멈추지 않고 다음작업을 수행하는 방식으로 비동기와 비슷하다. 
I/O는 Input/Output의 줄임말로 입력과 출력을 의미한다. 
Node.js는 네트워크 요청이 일어나게 되면 결과가 올 때까지 기다리지 않고 다음 문장을 실행한다.

※싱글스레드
Node.js는 싱글 스레드 이므로 주어진 작업을 혼자 처리해야 한다. 
Node.js에서 논 블로킹이 중요한 이유는 싱글 스레드를 사용하고 있기 때문에, 
블로킹 방식일 경우 작업을 요청하고 나서 결과가 나올 때 까지 기다린 다음에 다음 일을 처리 한다. 
Node.js는 싱글스레드를 여러 개 사용하여 멀티 프로세싱과 비슷한 기능을 할 수 있다.


